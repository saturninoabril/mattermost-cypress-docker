version: 2.1
orbs:
  node: circleci/node@1.1.6

workflows:
  build:
    jobs:
      - test-1:
          context: cypress-circleci-env
      - test-2:
          context: cypress-circleci-env
      - test-3:
          context: cypress-circleci-env
      - test-4:
          context: cypress-circleci-env
      - test-5:
          context: cypress-circleci-env
      - test-6:
          context: cypress-circleci-env
      - test-7:
          context: cypress-circleci-env
      - test-8:
          context: cypress-circleci-env

commands:
  setup-client:
    description: "Setup client"
    steps:
      - run:
          name: Setup client
          command: |
            whoami
            sudo apt-get update
            sudo apt-get install libxss1
  setup-required-files:
    description: "Setup required files"
    steps:
      - run:
          name: Setup required files
          command: |
            echo $EE_LICENSE > e2e/cypress/fixtures/mattermost-license.txt
            echo $SAML_IDP_CRT | base64 --decode > e2e/cypress/fixtures/saml-idp.crt
            echo $SAML_PRIVATE_KEY | base64 --decode > e2e/cypress/fixtures/saml-private.key
            echo $SAML_PUBLIC_CRT | base64 --decode > e2e/cypress/fixtures/saml-public.crt

            wget -O e2e/cypress/fixtures/com.mattermost.draw-plugin.tar.gz https://github.com/jespino/mattermost-plugin-draw/releases/download/v0.0.4/com.mattermost.draw-plugin-0.0.4.tar.gz
            wget -O e2e/cypress/fixtures/com.github.matterpoll.matterpoll.tar.gz https://github.com/matterpoll/matterpoll/releases/download/v1.3.0/com.github.matterpoll.matterpoll-1.3.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.1.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.1.0/com.mattermost.demo-plugin-0.1.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.2.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.2.0/com.mattermost.demo-plugin-0.2.0.tar.gz
  install-npm:
    description: "Install npm packages"
    steps:
      - run:
          name: Install npm packages
          command: cd e2e && npm install
  save-report:
    description: "Save and publish reports"
    steps:
      - run:
          name: Save and publish reports
          when: always
          command: |
            export BRANCH=$CIRCLE_BRANCH
            export BUILD_ID=$CIRCLE_BUILD_NUM

            # This is how it should be on main org repo
            # export PULL_REQUEST=$CIRCLE_PULL_REQUESTS

            # This is how it should be on main org repo
            # Should match the tag in mattermost/mattermost-enterprise-edition image
            # export BUILD_TAG="${CIRCLE_SHA1:0:7}"
            export BUILD_TAG=$MM_DOCKER_IMAGE_TAG

            cd e2e && node save_report.js

jobs:
  test-1:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl1
            export CYPRESS_dbConnection="$CYPRESS_dbConnection1"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=1 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-2:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl2
            export CYPRESS_dbConnection="$CYPRESS_dbConnection2"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=2 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-3:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl3
            export CYPRESS_dbConnection="$CYPRESS_dbConnection3"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=3 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-4:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl4
            export CYPRESS_dbConnection="$CYPRESS_dbConnection4"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=4 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-5:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl5
            export CYPRESS_dbConnection="$CYPRESS_dbConnection5"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=5 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-6:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl6
            export CYPRESS_dbConnection="$CYPRESS_dbConnection6"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=6 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-7:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl7
            export CYPRESS_dbConnection="$CYPRESS_dbConnection7"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=7 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-8:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl=$CYPRESS_baseUrl8
            export CYPRESS_dbConnection="$CYPRESS_dbConnection8"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            # none

            cd e2e && node run_tests.js --stage='@prod' --part=8 --of=8 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report
