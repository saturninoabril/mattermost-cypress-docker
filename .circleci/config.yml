version: 2.1
orbs:
  node: circleci/node@4.1.0

workflows:
  e2e:
    jobs:
      - create-test-server:
          context: cypress-circleci-env
          filters:
            branches:
              ignore:
                - master
      - generate-test-cycle:
          context: cypress-circleci-env
          requires:
            - create-test-server
      - e2e-test-1:
          context: cypress-circleci-env
          requires:
            - generate-test-cycle
      - e2e-test-2:
          context: cypress-circleci-env
          requires:
            - generate-test-cycle
      - e2e-test-3:
          context: cypress-circleci-env
          requires:
            - generate-test-cycle
      - e2e-test-4:
          context: cypress-circleci-env
          requires:
            - generate-test-cycle
      - merge-and-save-test-reports:
          context: cypress-circleci-env
          requires:
            - e2e-test-1
            - e2e-test-2
            - e2e-test-3
            - e2e-test-4

commands:
  setup-required-files:
    description: "Setup required files"
    steps:
      - run:
          name: Setup required files
          command: |
            wget -O e2e/cypress/fixtures/com.github.manland.mattermost-plugin-gitlab-1.3.0.tar.gz https://github.com/mattermost/mattermost-plugin-gitlab/releases/download/v1.3.0/com.github.manland.mattermost-plugin-gitlab-1.3.0.tar.gz

            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.9.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.9.0/com.mattermost.demo-plugin-0.9.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.8.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.8.0/com.mattermost.demo-plugin-0.8.0.tar.gz

            wget -O e2e/cypress/fixtures/keycloak.crt https://raw.githubusercontent.com/mattermost/mattermost-server/master/build/docker/keycloak/keycloak.crt
  attach-workspace:
    description: "Attach a workspace"
    steps:
      - attach_workspace:
          at: ~/mattermost
  apply-shared-env:
    steps:
      - run:
          name: Apply shared environment variables
          command: |
            cat ~/mattermost/env-var/shared >> $BASH_ENV
  install-npm:
    steps:
      - run:
          name: Install npm packages
          command: cd e2e && npm install
  save-cache:
    description: "Save cache"
    steps:
      - save_cache:
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
  save-report:
    description: "Save and publish reports"
    steps:
      - run:
          name: Save and publish reports
          when: always
          command: |
            # This is how it should be on main org repo
            # export PULL_REQUEST=$CIRCLE_PULL_REQUESTS

            # This is how it should be on main org repo
            # Should match the tag in mattermost/mattermost-enterprise-edition image
            # export BUILD_TAG="${CIRCLE_SHA1:0:7}"
            export BUILD_TAG="$MM_DOCKER_IMAGE:$MM_DOCKER_TAG"

            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node save_report.js |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
  create-test-server:
    steps:
      - run:
          name: Create the test server
          command: |
            TEST_SERVER_QUERY="&workspace=$CIRCLE_BRANCH&edition=$MM_EDITION&docker-image=$MM_DOCKER_IMAGE&docker-tag=$MM_DOCKER_TAG&instance-count=$SERVER_INSTANCE_COUNT&elasticsearch=true&keycloak=true"
            CREATE_URL="$TEST_SERVER_CREATE_ENDPOINT$TEST_SERVER_QUERY"
            curl -X POST $CREATE_URL
            sleep 1m
  teardown-test-server:
    steps:
      - run:
          name: Teardown the test server
          command: |
            TEST_SERVER_QUERY="&workspace=$CIRCLE_BRANCH"
            DESTROY_URL="$TEST_SERVER_DESTROY_ENDPOINT$TEST_SERVER_QUERY"
            curl -X POST $DESTROY_URL
  set-shared-env:
    steps:
      - run:
          name: Set shared environment variables
          command: |
            DNS_ZONE_NAME=dev.spinmint.com
            export BASE_URL_FULL=$CIRCLE_BRANCH-$MM_EDITION-$MM_DOCKER_TAG
            export BASE_URL_SUBSTR=${BASE_URL_FULL:0:45}

            BASE_URL_1="$BASE_URL_SUBSTR-1.$DNS_ZONE_NAME"
            BASE_URL_2="$BASE_URL_SUBSTR-2.$DNS_ZONE_NAME"
            BASE_URL_3="$BASE_URL_SUBSTR-3.$DNS_ZONE_NAME"
            BASE_URL_4="$BASE_URL_SUBSTR-4.$DNS_ZONE_NAME"
            BASE_URL_COMMON="$BASE_URL_SUBSTR-common.$DNS_ZONE_NAME"

            echo export MM_DOCKER_IMAGE=$MM_DOCKER_IMAGE >> shared
            echo export MM_DOCKER_TAG=$MM_DOCKER_TAG >> shared

            echo export TYPE=${TYPE} >> shared
            echo export PULL_REQUEST=${PULL_REQUEST} >> shared
            echo export REPO=${REPO} >> shared
            echo export BRANCH=${CIRCLE_BRANCH} >> shared
            echo export BUILD_ID=${CIRCLE_BUILD_NUM} >> shared
            echo export BROWSER=${BROWSER} >> shared
            echo export HEADLESS=${HEADLESS} >> shared
            echo export DASHBOARD_ENABLE=${DASHBOARD_ENABLE} >> shared
            echo export FULL_REPORT=${FULL_REPORT} >> shared

            echo export TM4J_ENABLE=${TM4J_ENABLE} >> shared
            echo export JIRA_PROJECT_KEY=${JIRA_PROJECT_KEY} >> shared
            echo export TM4J_FOLDER_ID=${TM4J_FOLDER_ID} >> shared
            echo export TM4J_ENVIRONMENT_NAME=${TM4J_ENVIRONMENT_NAME} >> shared

            echo export CYPRESS_chromeWebSecurity=${CYPRESS_chromeWebSecurity} >> shared
            echo export CYPRESS_numberOfTrialUsers=${CYPRESS_numberOfTrialUsers} >> shared
            echo export CYPRESS_resetBeforeTest=${CYPRESS_resetBeforeTest} >> shared
            echo export CYPRESS_runLDAPSync=${CYPRESS_runLDAPSync} >> shared
            echo export CYPRESS_serverEdition=${CYPRESS_serverEdition} >> shared

            echo export BASE_URL_1=${BASE_URL_1} >> shared
            echo export BASE_URL_2=${BASE_URL_2} >> shared
            echo export BASE_URL_3=${BASE_URL_3} >> shared
            echo export BASE_URL_4=${BASE_URL_4} >> shared
            echo export BASE_URL_COMMON=${BASE_URL_COMMON} >> shared

            cat shared >> $BASH_ENV
            source $BASH_ENV
  run-cypress:
    description: "Run Cypress test"
    parameters:
      ci_base_url:
        type: string
    steps:
      - run:
          name: Run Cypress test
          command: |
            curl --retry 10 --retry-delay 10 --retry-connrefused --max-time 120 << parameters.ci_base_url >>:8065/api/v4/system/ping

            export CI_BASE_URL=<< parameters.ci_base_url >>
            export CYPRESS_baseUrl="http://${CI_BASE_URL}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${CI_BASE_URL}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_elasticsearchConnectionUrl="http://${CI_BASE_URL}:9200"
            export CYPRESS_keycloakBaseUrl="http://${CI_BASE_URL}:8484"
            export CYPRESS_ldapServer=${CI_BASE_URL}
            export CYPRESS_minioS3Endpoint="${CI_BASE_URL}:9000"

            export CYPRESS_webhookBaseUrl="http://${CI_BASE_URL}:3000"
            export CYPRESS_smtpUrl="http://${CI_BASE_URL}:10080"
            export CYPRESS_ciBaseUrl=${CI_BASE_URL}
            export CYPRESS_allowedUntrustedInternalConnections="localhost ${CI_BASE_URL}"

            curl --retry 10 --retry-delay 10 --retry-connrefused --max-time 120 $CYPRESS_baseUrl

            cd e2e && node run_test_cycle.js
  persist-and-store:
    description: "Persist and store test artifacts"
    parameters:
      folder:
        type: string
    steps:
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - << parameters.folder >>/e2e/results
      - store_artifacts:
          path: ~/mattermost/<< parameters.folder >>/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/<< parameters.folder >>/e2e/results/junit

jobs:
  create-test-server:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mattermost/env-var
    environment:
      REPO: mattermost-webapp
      MM_DOCKER_IMAGE: mattermost-enterprise-edition
      MM_EDITION: ee
      MM_DOCKER_TAG: master
      SERVER_INSTANCE_COUNT: 4
      TYPE: NONE
      PULL_REQUEST: add-link
      BROWSER: chrome
      HEADLESS: true
      FULL_REPORT: false
      TM4J_ENABLE: false
      JIRA_PROJECT_KEY: MM
      TM4J_FOLDER_ID: ""
      TM4J_ENVIRONMENT_NAME: ""
      CYPRESS_chromeWebSecurity: false
      CYPRESS_numberOfTrialUsers: 10000
      CYPRESS_resetBeforeTest: true
      CYPRESS_runLDAPSync: true
      CYPRESS_serverEdition: E20
    steps:
      - attach-workspace
      - set-shared-env
      - create-test-server
      - run:
          name: Test server health check
          command: |
            curl --retry 30 --retry-delay 20 --retry-connrefused --max-time 600 "${BASE_URL_1}:8065/api/v4/system/ping"
            curl --retry 30 --retry-delay 20 --retry-connrefused --max-time 600 "${BASE_URL_2}:8065/api/v4/system/ping"
            curl --retry 30 --retry-delay 20 --retry-connrefused --max-time 600 "${BASE_URL_3}:8065/api/v4/system/ping"
            curl --retry 30 --retry-delay 20 --retry-connrefused --max-time 600 "${BASE_URL_4}:8065/api/v4/system/ping"
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - env-var/shared
  generate-test-cycle:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mattermost
    steps:
      - checkout
      - attach-workspace
      - apply-shared-env
      - install-npm
      - run:
          name: Generate test cycle from the Automation dashboard
          no_output_timeout: 30m
          command: |
            cd e2e
            node generate_test_cycle.js --stage="@prod" --excludeGroup="@te_only,@cloud_only,@high_availability" --sortFirst="@compliance_export,@elasticsearch,@ldap_group,@ldap" --sortLast="@saml,@keycloak,@plugin,@mfa"
  merge-and-save-test-reports:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mattermost
    steps:
      - checkout
      - attach-workspace
      - install-npm
      - save-cache
      - apply-shared-env
      - teardown-test-server
      - run:
          name: Consolidate reports to common /results folder
          no_output_timeout: 30m
          command: |
            cd e2e
            mkdir results
            cp -r ~/mattermost/e2e-test-1/e2e/results .
            cp -r ~/mattermost/e2e-test-2/e2e/results .
            cp -r ~/mattermost/e2e-test-3/e2e/results .
            cp -r ~/mattermost/e2e-test-4/e2e/results .
            cd ..
      - save-report
      - store_artifacts:
          path: ~/mattermost/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/e2e/results/junit
  e2e-test-1:
    docker:
      - image: cypress/included:7.1.0
    working_directory: ~/mattermost/e2e-test-1
    steps:
      - checkout
      - attach-workspace
      - setup-required-files
      - install-npm
      - save-cache
      - apply-shared-env
      - run-cypress:
          ci_base_url: $BASE_URL_1
      - persist-and-store:
          folder: e2e-test-1
  
  e2e-test-2:
    docker:
      - image: cypress/included:7.1.0
    working_directory: ~/mattermost/e2e-test-2
    steps:
      - checkout
      - attach-workspace
      - setup-required-files
      - install-npm
      - save-cache
      - apply-shared-env
      - run-cypress:
          ci_base_url: $BASE_URL_2
      - persist-and-store:
          folder: e2e-test-2

  e2e-test-3:
    docker:
      - image: cypress/included:7.1.0
    working_directory: ~/mattermost/e2e-test-3
    steps:
      - checkout
      - attach-workspace
      - setup-required-files
      - install-npm
      - save-cache
      - apply-shared-env
      - run-cypress:
          ci_base_url: $BASE_URL_3
      - persist-and-store:
          folder: e2e-test-3

  e2e-test-4:
    docker:
      - image: cypress/included:7.1.0
    working_directory: ~/mattermost/e2e-test-4
    steps:
      - checkout
      - attach-workspace
      - setup-required-files
      - install-npm
      - save-cache
      - apply-shared-env
      - run-cypress:
          ci_base_url: $BASE_URL_4
      - persist-and-store:
          folder: e2e-test-4
