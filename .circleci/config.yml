version: 2.1
orbs:
  node: circleci/node@1.1.6

workflows:
  build:
    jobs:
      - test-1:
          context: cypress-circleci-env

commands:
  setup-client:
    description: "Setup client"
    steps:
      - run:
          name: Setup client
          command: |
            whoami
            sudo apt-get update
            sudo apt-get install libxss1
  setup-required-files:
    description: "Setup required files"
    steps:
      - run:
          name: Setup required files
          command: |
            wget -O e2e/cypress/fixtures/com.mattermost.draw-plugin.tar.gz https://github.com/jespino/mattermost-plugin-draw/releases/download/v0.0.4/com.mattermost.draw-plugin-0.0.4.tar.gz
            wget -O e2e/cypress/fixtures/com.github.matterpoll.matterpoll.tar.gz https://github.com/matterpoll/matterpoll/releases/download/v1.3.0/com.github.matterpoll.matterpoll-1.3.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.1.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.1.0/com.mattermost.demo-plugin-0.1.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.2.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.2.0/com.mattermost.demo-plugin-0.2.0.tar.gz
  install-npm:
    description: "Install npm packages"
    steps:
      - run:
          name: Install npm packages
          command: cd e2e && npm install
  save-report:
    description: "Save and publish reports"
    steps:
      - run:
          name: Save and publish reports
          when: always
          command: |
            export BRANCH=$CIRCLE_BRANCH
            export BUILD_ID=$CIRCLE_BUILD_NUM

            # This is how it should be on main org repo
            # export PULL_REQUEST=$CIRCLE_PULL_REQUESTS

            # This is how it should be on main org repo
            # Should match the tag in mattermost/mattermost-enterprise-edition image
            # export BUILD_TAG="${CIRCLE_SHA1:0:7}"
            export BUILD_TAG=$MM_DOCKER_IMAGE_TAG

            cd e2e && node save_report.js

jobs:
  test-1:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      BASE_URL_PREFIX: ec2-3-95-186-84.compute-1.amazonaws.com
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            # cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export CYPRESS_baseUrl="http://${BASE_URL_PREFIX}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${BASE_URL_PREFIX}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="http://${BASE_URL_PREFIX}:3000"
            export CYPRESS_smtpUrl="http://${BASE_URL_PREFIX}:10080"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_numberOfTrialUsers=10000
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            echo "$BASE_URL_PREFIX"
            echo "$CYPRESS_baseUrl"
            echo "$CYPRESS_dbConnection"
            echo "$CYPRESS_webhookBaseUrl"
            echo "$CYPRESS_smtpUrl"

            until curl --max-time 5 --output - ${CYPRESS_baseUrl}; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --group='@ldap,@ldap_group' --part=1 --of=1 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-2:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            # cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export BASE_URL_PREFIX=qa-e2e-2
            export SITE_URL="ec2-3-87-200-200.compute-1.amazonaws.com"
            export CYPRESS_baseUrl="https://${SITE_URL}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${SITE_URL}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="https://${SITE_URL}:3000"
            export CYPRESS_smtpUrl="https://${SITE_URL}:10080"

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=false
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            echo ${SITE_URL}
            echo "$CYPRESS_baseUrl"
            echo ${CYPRESS_dbConnection}
            echo ${CYPRESS_webhookBaseUrl}
            echo ${CYPRESS_smtpUrl}

            until curl --max-time 5 --output - "$CYPRESS_baseUrl"; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --group='@elasticsearch,@ldap,@ldap_group' --part=2 --of=2 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-3:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            # cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            export BASE_URL_PREFIX=qa-e2e-3
            export CYPRESS_baseUrl=$CYPRESS_baseUrl3
            export CYPRESS_dbConnection=$CYPRESS_dbConnection3

            export CYPRESS_webhookBaseUrl=http://qa-e2e-master-3.dev.spinmint.com:3000
            export CYPRESS_smtpUrl=http://qa-e2e-master-3.dev.spinmint.com:10080

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=true
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            until curl --max-time 5 --output - $CYPRESS_webhookBaseUrl; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --stage='@prod' --part=3 --of=4 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report

  test-4:
    docker:
      - image: circleci/node:14-stretch-browsers-legacy
    working_directory: ~/mattermost-cypress-docker
    environment:
      MM_DOCKER_IMAGE_TAG: master
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost-cypress-docker
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            - ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            cd e2e && nohup node webhook_serve.js > webhook_serve.log &

            until curl --max-time 5 --output - $CYPRESS_baseUrl4; do echo waiting for app server; sleep 5; done;

            export BASE_URL_PREFIX=qa-e2e-4
            export CYPRESS_baseUrl=$CYPRESS_baseUrl4
            export CYPRESS_dbConnection=$CYPRESS_dbConnection4

            export CYPRESS_webhookBaseUrl=http://qa-e2e-master-4.dev.spinmint.com:3000
            export CYPRESS_smtpUrl=http://qa-e2e-master-4.dev.spinmint.com:10080

            export CYPRESS_chromeWebSecurity=true
            export CYPRESS_resetBeforeTest=true
            export CYPRESS_runLDAPSync=true
            export CYPRESS_runWithEELicense=true
            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node run_tests.js --stage='@prod' --part=4 --of=4 |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
      - save-report
