version: 2.1
orbs:
  node: circleci/node@4.1.0

workflows:
  build:
    jobs:
      - create-test-server:
          context: cypress-circleci-env
      - e2e-test-1:
          context: cypress-circleci-env
          requires:
            - create-test-server
      - e2e-test-2:
          context: cypress-circleci-env
          requires:
            - create-test-server
      - e2e-test-3:
          context: cypress-circleci-env
          requires:
            - create-test-server
      - e2e-test-4:
          context: cypress-circleci-env
          requires:
            - create-test-server
      - teardown-test-server:
          context: cypress-circleci-env
          requires:
            - e2e-test-1
            - e2e-test-2
            - e2e-test-3
            - e2e-test-4
      - merge-and-save-test-reports:
          context: cypress-circleci-env
          requires:
            - teardown-test-server

commands:
  setup-client:
    description: "Setup client"
    steps:
      - run:
          name: Setup client
          command: |
            whoami
            sudo apt-get update
            sudo apt-get install libxss1
  setup-required-files:
    description: "Setup required files"
    steps:
      - run:
          name: Setup required files
          command: |
            wget -O e2e/cypress/fixtures/com.mattermost.draw-plugin.tar.gz https://github.com/jespino/mattermost-plugin-draw/releases/download/v0.0.4/com.mattermost.draw-plugin-0.0.4.tar.gz
            wget -O e2e/cypress/fixtures/com.github.matterpoll.matterpoll.tar.gz https://github.com/matterpoll/matterpoll/releases/download/v1.3.0/com.github.matterpoll.matterpoll-1.3.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.1.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.1.0/com.mattermost.demo-plugin-0.1.0.tar.gz
            wget -O e2e/cypress/fixtures/com.mattermost.demo-plugin-0.2.0.tar.gz https://github.com/mattermost/mattermost-plugin-demo/releases/download/v0.2.0/com.mattermost.demo-plugin-0.2.0.tar.gz
            echo $USERS > e2e/cypress/fixtures/users.txt
  install-npm:
    description: "Install npm packages"
    steps:
      - run:
          name: Install npm packages
          command: cd e2e && npm install
  save-report:
    description: "Save and publish reports"
    steps:
      - run:
          name: Save and publish reports
          when: always
          command: |
            export BRANCH=$CIRCLE_BRANCH
            export BUILD_ID=$CIRCLE_BUILD_NUM

            # This is how it should be on main org repo
            # export PULL_REQUEST=$CIRCLE_PULL_REQUESTS

            # This is how it should be on main org repo
            # Should match the tag in mattermost/mattermost-enterprise-edition image
            # export BUILD_TAG="${CIRCLE_SHA1:0:7}"
            export BUILD_TAG=$MM_DOCKER_IMAGE_TAG

            export TM4J_ENABLE=true
            export JIRA_PROJECT_KEY=MM
            export TM4J_FOLDER_ID=1063065

            export FAILURE_MESSAGE="At least one test has failed."
            export RESULTS_OUTPUT="results-output.txt"

            cd e2e && node save_report.js |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi

jobs:
  create-test-server:
    environment:
      BASH_ENV: /etc/profile
      MM_DOCKER_IMAGE: mm-cloud-ee
      MM_DOCKER_TAG: test-1282467-23
      BROWSER: chrome
      HEADLESS: true
      CYPRESS_chromeWebSecurity: true
      CYPRESS_numberOfTrialUsers: 10000
      CYPRESS_resetBeforeTest: true
      CYPRESS_runLDAPSync: false
      CYPRESS_serverEdition: Cloud
    steps:
      - run:
          name: Create test servers
          no_output_timeout: 30m
          command: |
            TEST_SERVER_QUERY="&workspace=$CIRCLE_BRANCH&docker-image=$MM_DOCKER_IMAGE&docker-tag=$MM_DOCKER_TAG&instance-count=4"

            echo 'export MM_DOCKER_IMAGE=mm-cloud-ee' >> $BASH_ENV
            echo 'export MM_DOCKER_TAG=test-1282467-23' >> $BASH_ENV
            echo 'export TEST_SERVER_QUERY=$TEST_SERVER_QUERY' >> $BASH_ENV

            echo 'export BROWSER=$BROWSER' >> $BASH_ENV
            echo 'export HEADLESS=$HEADLESS' >> $BASH_ENV

            echo 'export CYPRESS_chromeWebSecurity=$CYPRESS_chromeWebSecurity' >> $BASH_ENV
            echo 'export CYPRESS_numberOfTrialUsers=$CYPRESS_numberOfTrialUsers' >> $BASH_ENV
            echo 'export CYPRESS_resetBeforeTest=$CYPRESS_resetBeforeTest' >> $BASH_ENV
            echo 'export CYPRESS_runLDAPSync=$CYPRESS_runLDAPSync' >> $BASH_ENV
            echo 'export CYPRESS_serverEdition=$CYPRESS_serverEdition' >> $BASH_ENV
  
            source $BASH_ENV

            echo $BASH_ENV

            node --version
            url="$TEST_SERVER_CREATE_ENDPOINT$TEST_SERVER_QUERY"
            curl -X POST $url

            BASE_URL_1="$CIRCLE_BRANCH-$MM_DOCKER_IMAGE-$MM_DOCKER_TAG-1.dev.spinmint.com"
            BASE_URL_2="$CIRCLE_BRANCH-$MM_DOCKER_IMAGE-$MM_DOCKER_TAG-2.dev.spinmint.com"
            BASE_URL_3="$CIRCLE_BRANCH-$MM_DOCKER_IMAGE-$MM_DOCKER_TAG-3.dev.spinmint.com"
            BASE_URL_4="$CIRCLE_BRANCH-$MM_DOCKER_IMAGE-$MM_DOCKER_TAG-4.dev.spinmint.com"
             
            until curl --max-time 5 --output - "${BASE_URL_1}:8065/api/v4/system/ping"; do echo waiting for app 1 ; sleep 5; done;
            until curl --max-time 5 --output - "${BASE_URL_2}:8065/api/v4/system/ping"; do echo waiting for app 2; sleep 5; done;
            until curl --max-time 5 --output - "${BASE_URL_3}:8065/api/v4/system/ping"; do echo waiting for app 3; sleep 5; done;
            until curl --max-time 5 --output - "${BASE_URL_4}:8065/api/v4/system/ping"; do echo waiting for app 4; sleep 5; done;
  teardown-test-server:
    docker:
      - image: cimg/node:15.3.0
    environment:
      BASH_ENV: /etc/profile
    steps:
      - run:
          name: Teardown test servers
          no_output_timeout: 30m
          command: |
            node --version
            url="$TEST_SERVER_DESTROY_ENDPOINT$TEST_SERVER_QUERY"
            curl -X POST $url
  merge-and-save-test-reports:
    docker:
      - image: circleci/node:lts-buster-browsers-legacy
    working_directory: ~/mattermost
    environment:
      MM_DOCKER_IMAGE_TAG: "$MM_DOCKER_IMAGE:$MM_DOCKER_TAG"
      TYPE: NONE
      PULL_REQUEST:
      BROWSER: chrome
      HEADLESS: true
      DASHBOARD_ENABLE: false
      FULL_REPORT: true
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
      - run:
          name: Merge and save reports
          no_output_timeout: 30m
          command: |
            cd e2e
            mkdir results
            cp -r ~/mattermost/e2e-test-1/e2e/results .
            cp -r ~/mattermost/e2e-test-2/e2e/results .
            cp -r ~/mattermost/e2e-test-3/e2e/results .
            cp -r ~/mattermost/e2e-test-4/e2e/results .

            cd ..
      - save-report
      - store_artifacts:
          path: ~/mattermost/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/e2e/results/junit
  e2e-test-1:
    docker:
      - image: circleci/node:lts-buster-browsers-legacy
    working_directory: ~/mattermost/e2e-test-1
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            echo $BASH_ENV

            export CYPRESS_baseUrl="http://${BASE_URL_1}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${BASE_URL_1}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="http://${BASE_URL_1}:3000"
            export CYPRESS_smtpUrl="http://${BASE_URL_1}:10080"
            export CYPRESS_ciBaseUrl=${BASE_URL_1}

            cd e2e && node run_tests.js --stage='@prod' --excludeGroup='@te_only' |& tee $RESULTS_OUTPUT; if grep "$FAILURE_MESSAGE" "$RESULTS_OUTPUT"; then exit 1; fi
  e2e-test-2:
    docker:
      - image: circleci/node:lts-buster-browsers-legacy
    working_directory: ~/mattermost/e2e-test-2
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            export CYPRESS_baseUrl="http://${BASE_URL_2}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${BASE_URL_2}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="http://${BASE_URL_2}:3000"
            export CYPRESS_smtpUrl="http://${BASE_URL_2}:10080"
            export CYPRESS_ciBaseUrl=${BASE_URL_2}

            until curl --max-time 5 --output - ${CYPRESS_baseUrl}; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --stage='@prod' --excludeGroup='@not_cloud,@e20_only,@te_only' --part=2 --of=4
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - e2e-test-2/e2e/results
      - store_artifacts:
          path: ~/mattermost/e2e-test-2/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/e2e-test-2/e2e/results/junit

  e2e-test-3:
    docker:
      - image: circleci/node:lts-buster-browsers-legacy
    working_directory: ~/mattermost/e2e-test-3
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            export CYPRESS_baseUrl="http://${BASE_URL_3}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${BASE_URL_3}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="http://${BASE_URL_3}:3000"
            export CYPRESS_smtpUrl="http://${BASE_URL_3}:10080"
            export CYPRESS_ciBaseUrl=${BASE_URL_3}

            until curl --max-time 5 --output - ${CYPRESS_baseUrl}; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --stage='@prod' --excludeGroup='@not_cloud,@e20_only,@te_only' --part=3 --of=4
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - e2e-test-3/e2e/results
      - store_artifacts:
          path: ~/mattermost/e2e-test-3/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/e2e-test-3/e2e/results/junit

  e2e-test-4:
    docker:
      - image: circleci/node:lts-buster-browsers-legacy
    working_directory: ~/mattermost/e2e-test-4
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - attach_workspace:
          at: ~/mattermost
      - setup-client
      - setup-required-files
      - install-npm
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "e2e/package-lock.json" }}
          paths:
            -  ./e2e/node_modules
      - run:
          name: Run Cypress Test
          no_output_timeout: 30m
          command: |
            export CYPRESS_baseUrl="http://${BASE_URL_4}:8065"
            export CYPRESS_dbConnection="postgres://mmuser:mostest@${BASE_URL_4}:5432/mattermost_test?sslmode=disable\u0026connect_timeout=10"

            export CYPRESS_webhookBaseUrl="http://${BASE_URL_4}:3000"
            export CYPRESS_smtpUrl="http://${BASE_URL_4}:10080"
            export CYPRESS_ciBaseUrl=${BASE_URL_4}

            until curl --max-time 5 --output - ${CYPRESS_baseUrl}; do echo waiting for app server; sleep 5; done;

            cd e2e && node run_tests.js --stage='@prod' --excludeGroup='@not_cloud,@e20_only,@te_only' --part=4 --of=4
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - e2e-test-4/e2e/results
      - store_artifacts:
          path: ~/mattermost/e2e-test-4/e2e/results
      - store_test_results:
          when: always
          path: ~/mattermost/e2e-test-4/e2e/results/junit
